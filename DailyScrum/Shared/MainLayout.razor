@inherits LayoutComponentBase
@inject IModalService Modal
@inject SettingsService SettingsService
@inject IRepository<Project> _projectRepository
@inject IRepository<Sprint> _sprintRepository

<div class="sidebar">
    <NavMenu />
</div>

<div class="main">
    <div class="top-row px-4">
        @*@SettingsService.GetValue(SettingKeys.CurrentProjectId)
        <br />
        @SettingsService.GetValue(SettingKeys.CurrentSprintId)*@

        <button class="btn btn-primary" @onclick="GoToCreateIssueModal">New Issue</button>

        <div class="select-group">

            <RadzenDropDown AllowClear="true" TValue="Guid"
                            Data="@(projects.Select(p => new { Id = p.Id, Name = p.Name }).Distinct())"
                            TextProperty="Name" ValueProperty="Id" Style="margin: 20px" Placeholder="Select Project" Change="@(args => ChangeActiveProject(args, "ASD"))" />
 

            <RadzenDropDown AllowClear="true" TValue="Guid"
                            Data="@(projects.Select(p => new { Id = p.Id, Name = p.Name }).Distinct())"
                            TextProperty="Name" ValueProperty="Id" Style="margin: 20px" Placeholder="Select Sprint" Change="@(args => ChangeActiveSprint(args, "ASD"))" />
        </div>


    </div>

    <div class="content px-4">
        @Body

    </div>
</div>


@code {
    private List<Project> projects;
    private List<Sprint> sprints;
    private Project project;
    private Sprint sprint;
    protected override void OnInitialized()
    {
        projects = _projectRepository.GetAll().ToList();
        project = projects.FirstOrDefault();
        sprint = _sprintRepository.GetAll().Where(x => x.ProjectId == project.Id).FirstOrDefault();
        SettingsService.SetValue(SettingKeys.CurrentProjectId, project.Id.ToString());
        SettingsService.SetValue(SettingKeys.CurrentSprintId, sprint.Id.ToString());
    }

    void GoToCreateIssueModal()
    {
        Modal.Show<CreateIssueModal>();
    }
    void ChangeActiveProject(object value, string s)
    {
        SettingsService.SetValue(SettingKeys.CurrentProjectId, value.ToString());
        StateHasChanged();
    }
    void ChangeActiveSprint(object value, string s)
    {
        SettingsService.SetValue(SettingKeys.CurrentSprintId, value.ToString());
        StateHasChanged();
    }
}